from scripts.bot import *


def get_keyboard(events: tuple) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup()
    for event in events:
        keyboard.row(InlineKeyboardButton(text=event[1], callback_data=f'event {event[0]}'))
    return keyboard


async def start(message: Message):
    try:
        cursor.execute('''INSERT INTO User (name, user_id)
                    VALUES (?, ?)''', (message.from_user.username, message.from_user.id))
    except Exception as e:
        print(e)

    keyboard = InlineKeyboardMarkup()
    keyboard.row(*[InlineKeyboardButton(text='–î–∞', callback_data='start_quest'),
                   InlineKeyboardButton(text='–ù–µ—Ç', callback_data='miss_quest')])

    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã')
    await message.answer('–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç', reply_markup=keyboard)


async def start_quest(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '''–ö–∞–∫–æ–π-—Ç–æ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–∏—Ä—É—Å –ø–æ—Ä–∞–∑–∏–ª –≤–µ—Å—å –Ω–∞—à –º–∏—Ä –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏, –ª—é–¥–∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –±–µ—Å–ø–æ—â–∞–¥–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–∂–∏—Ä–∞—é—â–∏—Ö –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π. –ö–æ–≥–¥–∞ –≤—Å—ë —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å —è –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –ø–æ—Ö–æ–¥ —Å–æ–≤—Å–µ–º –æ–¥–∏–Ω –±—É–∫–≤–∞–ª—å–Ω–æ –Ω–∞ –ø–∞—Ä—É –¥–Ω–µ–π —á—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å —Å–µ–±–µ, —á—Ç–æ —è —Å–º–æ–≥—É –≤—ã–∂–∏—Ç—å –≤ –æ–¥–∏–Ω–æ—á–∫—É. –ù–∞–≤–µ—Ä–Ω–æ–µ, –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –∏ —Å–ø–∞—Å–ª–æ –º–Ω–µ –∂–∏–∑–Ω—å –≤–µ–¥—å —Å–µ–π—á–∞—Å –≥–æ—Ä–æ–¥–∞ —ç—Ç–æ —Ä–∞—Å—Å–∞–¥–Ω–∏–∫–∏ –∑–æ–º–±–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–∂–∏—Ç—å.
     –° –º–æ–º–µ–Ω—Ç–∞ –º–æ–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥–ª—É—à–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–æ—è –∏—Å—Ç–æ—Ä–∏—è.''')

    keyboard = InlineKeyboardMarkup()

    cursor.execute('''UPDATE User
                        SET prev_event = 0, cur_event = 0
                        WHERE user_id = (?);
                        ''', (callback_query.from_user.id,)) # erasing user's progress

    cursor.execute('''SELECT text
                        FROM Event
                        WHERE Event_id = (SELECT cur_event
                                          FROM User
                        WHERE user_id = (?));''', (callback_query.from_user.id,))
    text, = cursor.fetchone()



    cursor.execute('''SELECT to_id, Refs.text
                        FROM Event JOIN Refs ON Event.Event_id = Refs.from_id
                        WHERE Event_id = (SELECT cur_event
                                          FROM User
                        WHERE user_id = (?));''', (callback_query.from_user.id,))
    events = cursor.fetchall()
    print(events, text)
    for event in events:
        keyboard.row(InlineKeyboardButton(text=event[1], callback_data=f'event {event[0]}'))

    await bot.send_message(callback_query.from_user.id, '–û—Ç–ª–∏—á–Ω–æ. –ù–∞—á–∏–Ω–∞–µ–º...')
    await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard)
    await callback_query.answer()


# @disp.callback_query_handler(text_startswith="event")
async def go_to_event(query: CallbackQuery):
    event_id = query.data.split()[1]
    cursor.execute('''SELECT text, image, audio, death
                            FROM Event
                            WHERE Event_id = (?);''', (event_id,))  # get event


    text, image, audio, death = cursor.fetchone()

    if image:
        try:
            with open(fr'..\images\{image}.jpg', 'rb') as photo:
                await query.message.reply_photo(photo)
        except Exception as e:
            print(e)


    if death:
        await bot.send_message(query.from_user.id, text)

        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='return'))
        await bot.send_message(query.from_user.id, '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –º–µ—Ä—Ç–≤—ã, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥?', reply_markup=keyboard)

    else:

        cursor.execute('''UPDATE User
                        SET prev_event = cur_event, cur_event = (?)
                        WHERE user_id = (?);
                        ''', (event_id, query.from_user.id))  # updating user event

        cursor.execute('''SELECT to_id, Refs.text
                                FROM Event JOIN Refs ON Event.Event_id = Refs.from_id
                                WHERE Event_id = (SELECT cur_event
                                                  FROM User
                                WHERE user_id = (?));''', (query.from_user.id,)) # getting further events
        keyboard = get_keyboard(cursor.fetchall())


        await bot.send_message(query.from_user.id, text, reply_markup=keyboard)
        db.commit()

    await query.answer()
    await query.message.delete()
    print(query.data, query.message)


async def miss_quest(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ü–æ–∫–∞')


async def revive(query: CallbackQuery):

    print((query.from_user.id,))
    cursor.execute('''SELECT cur_event
                            FROM User
                            WHERE user_id = (?)''', (query.from_user.id,))

    event_id, = cursor.fetchone()

    cursor.execute('''SELECT text, image, audio, death
                                FROM Event
                                WHERE Event_id = (?);''', (event_id,))  # get event

    text, image, audio, death = cursor.fetchone()

    cursor.execute('''UPDATE User
                            SET prev_event = cur_event, cur_event = (?)
                            WHERE user_id = (?);
                            ''', (event_id, query.from_user.id))  # updating user event

    cursor.execute('''SELECT to_id, Refs.text
                                    FROM Event JOIN Refs ON Event.Event_id = Refs.from_id
                                    WHERE Event_id = (SELECT cur_event
                                                      FROM User
                                    WHERE user_id = (?));''', (query.from_user.id,))  # getting further events
    keyboard = get_keyboard(cursor.fetchall())

    await bot.send_message(query.from_user.id, text, reply_markup=keyboard)
    db.commit()

    await query.answer()
    await query.message.delete()