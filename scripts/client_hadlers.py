from scripts.game_for_reviving import *


def get_keyboard(events: tuple) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup()
    for event in events:
        keyboard.row(InlineKeyboardButton(text=event[1], callback_data=f'event {event[0]}'))
    return keyboard


async def start(message: Message):
    await bot.send_message(1699660434,
                           f'User {message.from_user.username if message.from_user.username else message.from_user.first_name} connected.')
    try:
        cursor.execute('''INSERT INTO User (name, user_id)
                    VALUES (?, ?)''', (message.from_user.username if message.from_user.username
                                                              else message.from_user.first_name, message.from_user.id))
    except Exception as e:
        print(e)

    cursor.execute('''SELECT COUNT(*)
                        FROM User''')

    await bot.send_message(1699660434,
                           f'There are {cursor.fetchone()[0]} at all.')

    keyboard = InlineKeyboardMarkup()
    keyboard.row(*[InlineKeyboardButton(text='–î–∞', callback_data='start_quest'),
                   InlineKeyboardButton(text='–ù–µ—Ç', callback_data='miss_quest')])

    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã')
    await message.answer('–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç?', reply_markup=keyboard)


async def start_quest(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           '–£ –≤–∞—Å –±—É–¥–µ—Ç 1 –∂–∏–∑–Ω—å. –ü—Ä–∏ —Å–º–µ—Ä—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—á–∞—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ')
    await bot.send_message(callback_query.from_user.id, '''–ö–∞–∫–æ–π-—Ç–æ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–∏—Ä—É—Å –ø–æ—Ä–∞–∑–∏–ª –≤–µ—Å—å –Ω–∞—à –º–∏—Ä –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏, –ª—é–¥–∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –±–µ—Å–ø–æ—â–∞–¥–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–∂–∏—Ä–∞—é—â–∏—Ö –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π. –ö–æ–≥–¥–∞ –≤—Å—ë —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å —è –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –ø–æ—Ö–æ–¥ —Å–æ–≤—Å–µ–º –æ–¥–∏–Ω –±—É–∫–≤–∞–ª—å–Ω–æ –Ω–∞ –ø–∞—Ä—É –¥–Ω–µ–π —á—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å —Å–µ–±–µ, —á—Ç–æ —è —Å–º–æ–≥—É –≤—ã–∂–∏—Ç—å –≤ –æ–¥–∏–Ω–æ—á–∫—É. –ù–∞–≤–µ—Ä–Ω–æ–µ, –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –∏ —Å–ø–∞—Å–ª–æ –º–Ω–µ –∂–∏–∑–Ω—å –≤–µ–¥—å —Å–µ–π—á–∞—Å –≥–æ—Ä–æ–¥–∞ —ç—Ç–æ —Ä–∞—Å—Å–∞–¥–Ω–∏–∫–∏ –∑–æ–º–±–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–∂–∏—Ç—å.
     –° –º–æ–º–µ–Ω—Ç–∞ –º–æ–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥–ª—É—à–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–æ—è –∏—Å—Ç–æ—Ä–∏—è.''')

    keyboard = InlineKeyboardMarkup()

    cursor.execute('''UPDATE User
                        SET prev_event = 0, cur_event = 0, life = 1, shooting = false, stealth = false
                        WHERE user_id = (?);
                        ''', (callback_query.from_user.id,))  # erasing user's progress

    cursor.execute('''SELECT text
                        FROM Event
                        WHERE Event_id = (SELECT cur_event
                                          FROM User
                        WHERE user_id = (?));''', (callback_query.from_user.id,))
    text, = cursor.fetchone()

    cursor.execute('''SELECT to_id, Refs.text
                        FROM Event JOIN Refs ON Event.Event_id = Refs.from_id
                        WHERE Event_id = (SELECT cur_event
                                          FROM User
                        WHERE user_id = (?));''', (callback_query.from_user.id,))
    events = cursor.fetchall()
    print(events, text)
    for event in events:
        keyboard.row(InlineKeyboardButton(text=event[1], callback_data=f'event {event[0]}'))

    await bot.send_message(callback_query.from_user.id, '–û—Ç–ª–∏—á–Ω–æ. –ù–∞—á–∏–Ω–∞–µ–º...')
    await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard)
    await callback_query.answer()


# @disp.callback_query_handler(text_startswith="event")
async def go_to_event(query: CallbackQuery):
    event_id = query.data.split()[1]

    if event_id == '21':
        cursor.execute('''UPDATE User
                        SET shooting = true
                        WHERE user_id = (?)''', (query.from_user.id,))

    elif event_id == '23':
        cursor.execute('''UPDATE User
                                SET stealth = true
                                WHERE user_id = (?)''', (query.from_user.id,))

    elif event_id == '61':
        cursor.execute('''SELECT shooting
                        FROM User
                        WHERE user_id = (?)''', (query.from_user.id,))
        shooting, = cursor.fetchone()
        if shooting:
            event_id += '1'
        else:
            event_id += '2'

    elif event_id == '62':
        cursor.execute('''SELECT stealth
                                FROM User
                                WHERE user_id = (?)''', (query.from_user.id,))
        stealth, = cursor.fetchone()
        if stealth:
            event_id += '1'
        else:
            event_id += '2'

    elif event_id == '51':
        cursor.execute('''SELECT shooting
                                FROM User
                                WHERE user_id = (?)''', (query.from_user.id,))
        shooting, = cursor.fetchone()
        if shooting:
            event_id += '1'
        else:
            event_id += '2'

    elif event_id == '53':
        cursor.execute('''SELECT stealth
                                FROM User
                                WHERE user_id = (?)''', (query.from_user.id,))
        stealth, = cursor.fetchone()
        if stealth:
            event_id += '1'
        else:
            event_id += '2'

    elif event_id == '62':
        cursor.execute('''SELECT stealth
                                FROM User
                                WHERE user_id = (?)''', (query.from_user.id,))
        stealth, = cursor.fetchone()
        if stealth:
            event_id += '1'
        else:
            event_id += '2'
    print(event_id)

    cursor.execute('''SELECT text, image, audio, death
                            FROM Event
                            WHERE Event_id = (?);''', (event_id,))  # get event

    text, image, audio, death = cursor.fetchone()



    if image:
        try:
            with open(fr'..\images\{image}.jpg', 'rb') as photo:
                await query.message.answer_photo(photo)
        except Exception as e:
            print(e)

    if audio:
        try:
            with open(audio, 'rb') as aud:
                await query.message.answer_voice(aud)
        except Exception as e:
            print(e)

    cursor.execute('''SELECT life 
                    FROM User
                    WHERE user_id = (?)''', (query.from_user.id,))  # checking left lives
    life, = cursor.fetchone()

    if life == 0:
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton(text='–í —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ', callback_data='again'))
        keyboard.row(InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É?', callback_data='request_game'))

        keyboard.row(InlineKeyboardButton(text='–°–æ –º–Ω–æ–π', callback_data='game_with_bot'),
                     InlineKeyboardButton(text='–°–æ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º', callback_data='game_with_user'))
        await bot.send_message(query.from_user.id, '''–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏. –ß—Ç–æ–±—ã –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Å–æ –º–Ω–æ–π
                        –ù–∞—á–∞—Ç—å –∏–≥—Ä—É?''', reply_markup=keyboard)

    elif death:
        await bot.send_message(query.from_user.id, text)

        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton(text='–í —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ?', callback_data='again'))

        keyboard.row(InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É?', callback_data='request_game'))

        keyboard.row(InlineKeyboardButton(text='–°–æ –º–Ω–æ–π', callback_data='game_with_bot'),
                     InlineKeyboardButton(text='–°–æ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º', callback_data='game_with_user'))
        await bot.send_message(query.from_user.id, '''–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏. –ß—Ç–æ–±—ã –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Å–æ –º–Ω–æ–π
        –ù–∞—á–∞—Ç—å –∏–≥—Ä—É?''', reply_markup=keyboard)

    else:
        cursor.execute('''UPDATE User
                        SET prev_event = cur_event, cur_event = (?)
                        WHERE user_id = (?);
                        ''', (event_id, query.from_user.id))  # updating user event

        cursor.execute('''SELECT to_id, Refs.text
                                FROM Event JOIN Refs ON Event.Event_id = Refs.from_id
                                WHERE Event_id = (SELECT cur_event
                                                  FROM User
                                WHERE user_id = (?));''', (query.from_user.id,))  # getting further events
        keyboard = get_keyboard(cursor.fetchall())

        await bot.send_message(query.from_user.id, text, reply_markup=keyboard)
        db.commit()

    await query.answer()
    await query.message.delete()
    print(query.data, query.message)


async def miss_quest(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ü–æ–∫–∞')


async def revive(query: CallbackQuery):
    print((query.from_user.id,))
    cursor.execute('''SELECT cur_event
                            FROM User
                            WHERE user_id = (?)''', (query.from_user.id,))

    event_id, = cursor.fetchone()

    cursor.execute('''SELECT text, image, audio, death
                                FROM Event
                                WHERE Event_id = (?);''', (event_id,))  # get event

    text, image, audio, death = cursor.fetchone()

    cursor.execute('''UPDATE User
                            SET prev_event = cur_event, cur_event = (?), life = life - 1
                            WHERE user_id = (?);
                            ''', (event_id, query.from_user.id))  # updating user event

    cursor.execute('''SELECT to_id, Refs.text
                                    FROM Event JOIN Refs ON Event.Event_id = Refs.from_id
                                    WHERE Event_id = (SELECT cur_event
                                                      FROM User
                                    WHERE user_id = (?));''', (query.from_user.id,))  # getting further events
    keyboard = get_keyboard(cursor.fetchall())

    await bot.send_message(query.from_user.id, text, reply_markup=keyboard)
    db.commit()

    await query.answer()
    await query.message.delete()


async def again(query: CallbackQuery):

    await start_quest(query)
    await query.message.delete()


async def start_game_with_bot(query: CallbackQuery):
    max_val = random.choice([100, 1000, 5000, 10000])

    cursor.execute('''UPDATE User
                    SET num_for_game = (?)
                    WHERE user_id = (?)''', (random.randint(1, max_val), query.from_user.id))
    await bot.send_message(query.from_user.id, f'''–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_val}.
    –¢–µ–±–µ –Ω—É–∂–Ω–æ –µ–≥–æ —É–≥–∞–¥–∞—Ç—å. –£–¥–∞—á–∏''')
    await Quest_states.game.set()

    db.commit()
    await query.message.delete()


async def game_with_bot(message: Message):
    try:
        guess = int(message.text)

        cursor.execute('''SELECT num_for_game
                            FROM User
                            Where user_id = (?)''', (message.from_user.id,))

        right, = cursor.fetchone()
        print(guess, right)
        if right == guess:

            cursor.execute('''UPDATE User
                            SET life = 1
                            WHERE user_id = (?)''', (message.from_user.id,))

            await Quest_states.quest.set()

            keyboard = InlineKeyboardMarkup()

            cursor.execute('''SELECT cur_event
                                        FROM User
                                        WHERE user_id = (?)''', (message.from_user.id,))

            event_id, = cursor.fetchone()
            print(event_id)

            keyboard.row(InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f'event {event_id}'))
            await message.answer('–í—ã —É–≥–∞–¥–∞–ª–∏!', reply_markup=keyboard)

        elif right < guess:
            await message.answer('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ')
        else:
            await message.answer('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ')

    except Exception as e:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        print(e)
